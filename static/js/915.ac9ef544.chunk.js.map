{"version":3,"file":"static/js/915.ac9ef544.chunk.js","mappings":"qLACA,GAAiB,E,kBCIXA,EAAM,IAAIC,EAAAA,EAAc,CAAC,GAkE/B,MAhEA,WACE,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BC,EAAAA,EAAAA,UAASF,EAAaG,IAAI,UAAY,IAAhE,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BH,EAAAA,EAAAA,UAAS,MAArC,eAAOI,EAAP,KAAeC,EAAf,KAEQC,GAAaC,EAAAA,EAAAA,MAAbD,SAwBR,OAdAE,EAAAA,EAAAA,YAAU,WACHN,GAELP,EACGc,kBAAkBP,GAClBQ,MAAK,SAAAC,GAAU,OAAIN,EAAUM,EAAWC,QAAzB,GACnB,GAAE,KAEHJ,EAAAA,EAAAA,YAAU,WACO,OAAXJ,GAEJL,EAAgB,CAAEG,MAAOA,GAC1B,GAAE,CAACE,KAGF,iCACE,gBAAKS,UAAWC,EAAAA,UAAhB,UACE,kBAAMC,SAzBO,SAAAC,GACjBA,EAAEC,iBAEFtB,EACGc,kBAAkBP,GAClBQ,MAAK,SAAAC,GAAU,OAAIN,EAAUM,EAAWC,QAAzB,GACnB,EAmBK,WACE,kBACEM,KAAK,OACLC,SAAU,SAAAH,GAAC,OAAIb,EAASa,EAAEI,cAAcC,MAA7B,EACXC,YAAY,sBACZD,MAAOnB,EACPqB,UAAQ,KAEV,mBAAQL,KAAK,SAAb,yBAIHd,IACC,eAAIS,UAAWC,EAAAA,KAAf,SACGV,EAAOoB,KAAI,SAAAC,GACV,OACE,eAAmBZ,UAAWC,EAAAA,SAA9B,UACE,SAAC,KAAD,CACEY,GAAE,UAAKpB,EAAL,YAAiBmB,EAAME,IACzBC,MAAK,UAAKtB,EAAL,kBAAuBJ,GAF9B,SAIGuB,EAAMI,eAAiBJ,EAAMI,eAAiBJ,EAAMK,SALhDL,EAAME,GASlB,QAKV,C","sources":["views/MoviesViews/MoviesViews.module.css","views/MoviesViews/MoviesViews.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import React, { useEffect, useState } from 'react';\r\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\r\nimport style from './MoviesViews.module.css';\r\n\r\nimport ThemoviedbApi from '../../services/ThemoviedbApi';\r\nconst api = new ThemoviedbApi({});\r\n\r\nfunction MoviesViews() {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [query, setQuery] = useState(searchParams.get('query') || '');\r\n  const [movies, setMovies] = useState(null);\r\n\r\n  const { pathname } = useLocation();\r\n\r\n  const findMovies = e => {\r\n    e.preventDefault();\r\n\r\n    api\r\n      .fetchMovieByQuery(query)\r\n      .then(dataMovies => setMovies(dataMovies.results));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!query) return;\r\n\r\n    api\r\n      .fetchMovieByQuery(query)\r\n      .then(dataMovies => setMovies(dataMovies.results));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (movies === null) return;\r\n\r\n    setSearchParams({ query: query });\r\n  }, [movies]);\r\n\r\n  return (\r\n    <>\r\n      <div className={style.container}>\r\n        <form onSubmit={findMovies}>\r\n          <input\r\n            type=\"text\"\r\n            onChange={e => setQuery(e.currentTarget.value)}\r\n            placeholder=\"Enter your query...\"\r\n            value={query}\r\n            required\r\n          />\r\n          <button type=\"submit\">Search</button>\r\n        </form>\r\n      </div>\r\n\r\n      {movies && (\r\n        <ul className={style.list}>\r\n          {movies.map(movie => {\r\n            return (\r\n              <li key={movie.id} className={style.listItem}>\r\n                <Link\r\n                  to={`${pathname}/${movie.id}`}\r\n                  state={`${pathname}?query=${query}`}\r\n                >\r\n                  {movie.original_title ? movie.original_title : movie.title}\r\n                </Link>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MoviesViews;\r\n"],"names":["api","ThemoviedbApi","useSearchParams","searchParams","setSearchParams","useState","get","query","setQuery","movies","setMovies","pathname","useLocation","useEffect","fetchMovieByQuery","then","dataMovies","results","className","style","onSubmit","e","preventDefault","type","onChange","currentTarget","value","placeholder","required","map","movie","to","id","state","original_title","title"],"sourceRoot":""}